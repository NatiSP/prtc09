  class Matrix
    
    include Enumerable
	attr_reader :filas, :columnas
	
	  def initialize(filas, columnas)
	    @filas = filas
	    @columnas = columnas
	  end
	  
	  def filas
	    return @filas
	  end

	  def columnas	    
	    return @columnas
	  end
	  
	  def +(other)
	    
	    if (other.columnas == self.columnas && other.filas == self.filas)	      
	      suma = self.class.new(self.filas,self.columnas)	    
	    for i in 0...self.filas
	      for j in 0...self.columnas		
		suma[i,j] = self[i,j] + other[i,j]
	      end
	    end
	      suma
	    else 
	      puts "No se puede sumar, las matrices no tienen las mismas dimensiones!"
	    end
	    
	  end
  
	  def -(other)
	    	    
	    if ((other.columnas == self.columnas) && (other.filas == self.filas))	      
	      resta = self.class.new(self.filas,self.columnas)	    
	    for i in 0..self.filas
	      for j in 0..self.columnas		
		resta[i,j] = self[i,j] + other[i,j]
	      end
	    end
	      resta
	    else 
	      puts "No se puede restar, las matrices no tienen las mismas dimensiones!"
	    end
	    
	  end
	  
	  def *(other)

	    mul = self.class.new(filas, other.columnas)        
	      for i in (0..mul.filas)
		for j in (0..mul.columnas)
		  mul[i,j] = (self[i,j])*(other[i,j])
		    for k in (1..@columnas)
		  mul[i][j] = mul[i][j] + (self[i][k])*(other[k][j])
		end
	      end
	    end
	      mul

	  end
	  
	  def to_s
      
	    for i in 0...@filas
	      for j in 0...@columnas
		puts "#{self[i,j]}"
		puts " "
		  if j == @columnas
		      puts "\n"
		  end
	      end
	    end
	    
	  end
          
	  def ==(other)
	        
	    for i in (i..self.filas)
	      for j in (j..self.columnas)
		if self[i,j] != other[i,j]
		  return false
		end
	      end
	    end
	    	  return true
	  end
	  

  end
  
  
  md1 = Matrix_Densa.new(3,3)
  md1[0,0] = 1
  md1[0,1] = 1
  md1[0,2] = 1
  md1[1,0] = 2
  md1[1,1] = 2
  md1[1,2] = 2
  
  
  md2 = Matrix_Densa.new(3,3)
  md2[0,0] = 2
  md2[0,1] = 2
  md2[0,2] = 2
  md2[1,0] = 1
  md2[1,1] = 1
  md2[1,2] = 1
  
  md3 = md1 + md2
  md4 = md1 - md2
  md5 = md1 * md2
  puts md1 == md2
  md3.to_s
  puts "/n"
  md4.to_s
  puts "/n"
  md5.to_s
  